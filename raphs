import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns
from matplotlib.ticker import MaxNLocator

# Set the style for the plots
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("talk", font_scale=1.1)

# Function to convert time entries to seconds
def convert_to_seconds(time_str):
    if pd.isna(time_str):
        return np.nan
    time_str = str(time_str).lower().strip()

    if time_str == 'yes':
        return 90
    if 'min' in time_str:
        if 'less than 5 mins' in time_str:
            return 240
        elif '5-25 min' in time_str:
            return 900
        else:
            nums = [int(s) for s in time_str.split() if s.isdigit()]
            return nums[0] * 60 if nums else 60
    if 'sec' in time_str:
        if '-' in time_str:
            parts = time_str.split('-')
            try:
                lower = int(''.join(filter(str.isdigit, parts[0])))
                upper = int(''.join(filter(str.isdigit, parts[1])))
                return (lower + upper) / 2
            except:
                return 15
        else:
            nums = [int(s) for s in time_str.split() if s.isdigit()]
            return nums[0] if nums else 15
    if 'more than 1 min' in time_str:
        return 90
    try:
        return float(time_str)
    except:
        return np.nan

# Sample data
data = {
    "Timestamp": [
        "2025/04/22 11:23:16 am CET", "2025/04/22 11:23:45 am CET", "2025/04/22 11:25:02 am CET",
        "2025/04/22 11:26:51 am CET", "2025/04/22 11:27:17 am CET", "2025/04/22 11:28:22 am CET",
        "2025/04/22 11:32:10 am CET", "2025/04/22 11:32:39 am CET", "2025/04/22 11:43:41 am CET",
        "2025/04/22 11:46:20 am CET", "2025/04/22 11:53:42 am CET", "2025/04/22 11:55:20 am CET",
        "2025/04/22 12:00:54 pm CET", "2025/04/22 12:08:59 pm CET", "2025/04/22 12:27:39 pm CET",
        "2025/04/22 12:28:31 pm CET", "2025/04/22 12:46:09 pm CET", "2025/04/22 12:47:10 pm CET",
        "2025/04/22 1:43:43 pm CET"
    ],
    "Age": [
        "25-34", "18-24", "25-34", "25-34", "18-24", "25-34", "18-24", "35-44", "18-24",
        "25-34", "25-34", "18-24", "25-34", "35-44", "18-24", "25-34", "18-24", "18-24", "25-34"
    ],
    "Login_Method": [
        "Password only", "Password only", "Password only", "2FA (Two-Factor Authentication)",
        "Password only", "2FA (Two-Factor Authentication)", "2FA (Two-Factor Authentication)",
        "2FA (Two-Factor Authentication)", "2FA (Two-Factor Authentication)", "Password only",
        "Password only", "Password only", "2FA (Two-Factor Authentication)", "Password only",
        "2FA (Two-Factor Authentication)", "2FA (Two-Factor Authentication)", "Password only",
        "Password only", "Password only"
    ],
    "2FA_Type": [
        "Authenticator App", "OPT(One-Time Password)", "Authenticator App", "OPT(One-Time Password)",
        "OPT(One-Time Password)", "SMS", "Authenticator App", "Authenticator App", "SMS",
        "OPT(One-Time Password)", "Authenticator App", "OPT(One-Time Password)", "Authenticator App",
        "OPT(One-Time Password)", "Email", "OPT(One-Time Password)", "OPT(One-Time Password)",
        "OPT(One-Time Password)", "Email"
    ],
    "Login_Time": [
        "10", "10", "5 seconds", "Less than 5 mins", "30", "5", "20", "10-20", "More than 1 min",
        "7 minutes", "40 seconds", "10-25sec", "1sec", "Yes", "15 sec", "30", "5-25 min", "5-25sec", "40 sec"
    ],
    "Issues": [
        "No", "Yes", "Yes", "Yes", "Yes", "No", "No", "No", "Yes", "Yes", "No", "No", "No", "Yes",
        "Yes", "No", "No", "No", "No"
    ],
    "Ease_Rating": [
        1, 2, 3, 2, 2, 2, 1, 1, 4, 3, 5, 3, 1, 3, 3, 1, 3, 3, 1
    ],
    "Security_Rating": [
        4, 4, 4, 2, 3, 3, 5, 4, 4, 3, 3, 1, 5, 1, 3, 4, 1, 1, 5
    ],
    "Tech_Confidence": [
        4, 4, 4, 2, 4, 3, 4, 4, 3, 4, 5, 1, 5, 1, 3, 5, 1, 1, 4
    ]
}

df = pd.DataFrame(data)
df['Login_Time_Seconds'] = df['Login_Time'].apply(convert_to_seconds)
df['Auth_Category'] = df['Login_Method'].apply(lambda x: '2FA' if '2FA' in x else 'Password-only')
df = df[df['Issues'] != 'No (If no, use form logic to end the form)']

# Stats by authentication method
stats_by_auth = df.groupby('Auth_Category').agg({
    'Login_Time_Seconds': ['mean', 'std', 'count'],
    'Security_Rating': ['mean', 'std', 'count'],
    'Ease_Rating': ['mean', 'std']
}).reset_index()

stats_by_auth.columns = ['Auth_Category', 'Mean_Login_Time', 'SD_Login_Time', 'Count_Login_Time',
                         'Mean_Security', 'SD_Security', 'Count_Security', 'Mean_Ease', 'SD_Ease']

# Stats by 2FA type
stats_by_2fa = df[df['Auth_Category'] == '2FA'].groupby('2FA_Type').agg({
    'Login_Time_Seconds': ['mean', 'std', 'count'],
    'Security_Rating': ['mean', 'std']
}).reset_index()
stats_by_2fa.columns = ['2FA_Type', 'Mean_Login_Time', 'SD_Login_Time', 'Count',
                        'Mean_Security', 'SD_Security']

# T-tests
t_stat, p_val_time = stats.ttest_ind(
    df[df['Auth_Category'] == 'Password-only']['Login_Time_Seconds'].dropna(),
    df[df['Auth_Category'] == '2FA']['Login_Time_Seconds'].dropna(),
    equal_var=False
)
print(f"\nIndependent t-test for Login Time: t = {t_stat:.3f}, p = {p_val_time:.3f}")

t_stat, p_val_security = stats.ttest_ind(
    df[df['Auth_Category'] == 'Password-only']['Security_Rating'],
    df[df['Auth_Category'] == '2FA']['Security_Rating'],
    equal_var=False
)
print(f"Independent t-test for Security Perception: t = {t_stat:.3f}, p = {p_val_security:.3f}")

# Spearman correlation
valid_rows = df.dropna(subset=['Login_Time_Seconds', 'Security_Rating'])
correlation, p_value = stats.spearmanr(valid_rows['Login_Time_Seconds'], valid_rows['Security_Rating'])
print(f"Spearman correlation: ρ = {correlation:.3f}, p = {p_value:.3f}")

# Plot 1: Login time by auth method
plt.figure(figsize=(10, 6))
ax = sns.barplot(x='Auth_Category', y='Mean_Login_Time', data=stats_by_auth, palette="Blues_d")
for i, row in stats_by_auth.iterrows():
    ax.errorbar(i, row['Mean_Login_Time'], yerr=row['SD_Login_Time']/np.sqrt(row['Count_Login_Time']),
                color='black', linewidth=1.5, capsize=8)
    ax.text(i, row['Mean_Login_Time'] + 5, f"{row['Mean_Login_Time']:.1f}s", ha='center')
plt.title('Mean Login Time by Authentication Method')
plt.ylabel('Login Time (seconds)')
plt.tight_layout()
plt.show()

# Plot 2: Security rating by auth method
plt.figure(figsize=(10, 6))
ax = sns.barplot(x='Auth_Category', y='Mean_Security', data=stats_by_auth, palette="Greens_d")
for i, row in stats_by_auth.iterrows():
    ax.errorbar(i, row['Mean_Security'], yerr=row['SD_Security']/np.sqrt(row['Count_Security']),
                color='black', linewidth=1.5, capsize=8)
    ax.text(i, row['Mean_Security'] + 0.15, f"{row['Mean_Security']:.2f}", ha='center')
plt.title('Perceived Security Rating by Authentication Method')
plt.ylabel('Security Rating (1–5)')
plt.ylim(0, 5.5)
plt.tight_layout()
plt.show()

# Plot 3: Login time vs security rating
plt.figure(figsize=(10, 6))
sns.regplot(x='Login_Time_Seconds', y='Security_Rating', data=valid_rows,
            scatter_kws={'alpha': 0.6}, line_kws={'color': 'red'})
plt.title(f'Login Time vs. Security Perception\nSpearman ρ = {correlation:.2f}, p = {p_value:.3f}')
plt.xlabel('Login Time (seconds)')
plt.ylabel('Security Rating (1–5)')
plt.tight_layout()
plt.show()

# Plot 4: 2FA types comparison
if not stats_by_2fa.empty:
    fig, ax1 = plt.subplots(figsize=(12, 6))
    x = np.arange(len(stats_by_2fa))
    width = 0.35
    ax1.bar(x - width/2, stats_by_2fa['Mean_Login_Time'], width, label='Login Time', color='skyblue')
    ax1.set_ylabel('Login Time (s)')
    ax2 = ax1.twinx()
    ax2.bar(x + width/2, stats_by_2fa['Mean_Security'], width, label='Security Rating', color='lightgreen')
    ax2.set_ylabel('Security Rating (1–5)')
    ax1.set_xticks(x)
    ax1.set_xticklabels(stats_by_2fa['2FA_Type'], rotation=45, ha='right')
    ax1.set_title('Comparison of Different 2FA Methods')
    ax1.legend(loc='upper left')
    ax2.legend(loc='upper right')
    plt.tight_layout()
    plt.show()

# Plot 5: Login issues by auth method
issue_data = df.groupby(['Auth_Category', 'Issues']).size().unstack(fill_value=0)
issue_data_percent = issue_data.div(issue_data.sum(axis=1), axis=0) * 100
ax = issue_data_percent.plot(kind='bar', stacked=True, figsize=(10, 6), color=['#ff9999','#66b3ff'])
plt.title('Login Issues by Authentication Method')
plt.ylabel('Percentage of Responses')
plt.xlabel('Authentication Method')
for c in ax.containers:
    labels = [f'{v:.1f}%' if v > 0 else '' for v in c.datavalues]
    ax.bar_label(c, labels=labels, label_type='center')
plt.tight_layout()
plt.show()
